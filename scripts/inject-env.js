#!/usr/bin/env node

/**
 * Build script to inject environment variables into HTML files
 * This runs during Netlify build process to make env vars available to client-side
 */

const fs = require('fs');
const path = require('path');

// Environment variables that should be available to client-side
const CLIENT_ENV_VARS = [
    'VITE_SUPABASE_URL',
    'VITE_SUPABASE_ANON_KEY',
    'VITE_ENVIRONMENT',
    'VITE_APP_NAME',
    'VITE_APP_VERSION'
];

function injectEnvVars() {
    console.log('üîß Starting environment variables injection...');
    
    // Collect environment variables
    const envVars = {};
    CLIENT_ENV_VARS.forEach(varName => {
        if (process.env[varName]) {
            envVars[varName] = process.env[varName];
            console.log(`‚úÖ Found ${varName}`);
        } else {
            console.warn(`‚ö†Ô∏è Missing ${varName}`);
        }
    });

    // Check for required variables
    if (!envVars.VITE_SUPABASE_URL || !envVars.VITE_SUPABASE_ANON_KEY) {
        console.error('‚ùå Missing required environment variables!');
        console.error('Please set VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY in Netlify');
        process.exit(1);
    }

    // Find HTML files to inject into
    const htmlFiles = [
        'index.html',
        'club-recruitment.html',
        'event-calendar.html',
        'event-admin-dashboard.html',
        'president-login.html'
    ];

    htmlFiles.forEach(filename => {
        const filePath = path.join(process.cwd(), filename);
        if (fs.existsSync(filePath)) {
            injectIntoFile(filePath, envVars);
        } else {
            console.warn(`‚ö†Ô∏è File not found: ${filename}`);
        }
    });

    // Create a standalone env config file
    createEnvConfigFile(envVars);

    console.log('‚úÖ Environment variables injection completed!');
}

function injectIntoFile(filePath, envVars) {
    console.log(`üìù Injecting environment variables into ${path.basename(filePath)}`);
    
    let content = fs.readFileSync(filePath, 'utf8');
    
    // Instead of injecting actual values, inject a reference that will be resolved at runtime
    const envScript = `
    <!-- Environment Variables (Injected during build) -->
    <script>
        // Environment variables will be loaded from Netlify function
        window.__ENV_INJECTED__ = true;
        window.__ENV_BUILD_TIME__ = '${Date.now()}';
        console.log('üåê Environment variables configured for Netlify runtime loading');
    </script>`;

    // Try to inject before closing head tag
    if (content.includes('</head>')) {
        content = content.replace('</head>', `${envScript}\n</head>`);
    } else {
        // Fallback: inject after opening body tag
        content = content.replace('<body>', `<body>\n${envScript}`);
    }

    // Add meta tags indicating environment is configured (without actual values)
    const metaTags = `
    <!-- Environment Configuration Meta Tags -->
    <meta name="env:configured" content="true">
    <meta name="env:build-time" content="${Date.now()}">
    <meta name="env:netlify" content="true">`;
    
    if (content.includes('</head>')) {
        content = content.replace('</head>', `${metaTags}\n</head>`);
    }

    fs.writeFileSync(filePath, content);
    console.log(`‚úÖ Successfully configured ${path.basename(filePath)} for Netlify environment loading`);
}

function createEnvConfigFile(envVars) {
    const configPath = path.join(process.cwd(), 'js', 'env-config.js');
    const configContent = `
/**
 * Environment Configuration (Generated during build)
 * This file is automatically generated during the build process
 */

window.__BUILD_ENV__ = ${JSON.stringify(envVars, null, 2)};

// Make environment variables available globally
window.getEnvironment = function() {
    return Promise.resolve(window.__BUILD_ENV__);
};

console.log('üì¶ Environment configuration loaded from build-time generation');
`;

    fs.writeFileSync(configPath, configContent);
    console.log('‚úÖ Created env-config.js file');
}

// Run the injection
if (require.main === module) {
    injectEnvVars();
}

module.exports = { injectEnvVars };
